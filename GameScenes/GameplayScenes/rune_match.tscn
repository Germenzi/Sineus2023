[gd_scene load_steps=2 format=3 uid="uid://drnx0su81cjuc"]

[sub_resource type="GDScript" id="GDScript_uf2wm"]
resource_name = "main"
script/source = "extends CenterContainer

signal succeed

@export_range(1.0, 500.0)
var match_radius : float = 20.0

var _rune_match_instance : Control
var _key_points_markers : Array[Control] = []
var _matching_point_idx : int = 0
var _mouse_node : Control

var _is_matching : bool = false
var _is_dragging : bool = false


#func _ready() -> void:
	#begin_match(preload(\"res://GameScenes/TasksContent/rune_image_puzzle.tscn\").instantiate(), 100000)


func begin_match(rune_match_puzzle:Control) -> void:
	if _rune_match_instance != null:
		_rune_match_instance.queue_redraw()
		remove_child(_rune_match_instance)
	
	add_child(rune_match_puzzle)
	rune_match_puzzle.show_behind_parent = true
	_rune_match_instance = rune_match_puzzle
	
	_key_points_markers = []
	for i in _rune_match_instance.get_children():
		_key_points_markers.append(i)
	 
	_matching_point_idx = 0
	_is_matching = true


func _process(delta: float) -> void:
	queue_redraw()
	
	if not _is_matching:
		return
	
	var mouse_pos : Vector2 = get_global_mouse_position()
	var min_length : float = -1.0
	var min_idx : int = 100000
	
	_mouse_node = null
	
	for i:int in range(_matching_point_idx, len(_key_points_markers)):
		var marker : Control = _key_points_markers[i]
		var dist_to_mouse : float = (mouse_pos-marker.global_position).length()
		if (dist_to_mouse < match_radius) and (min_length < 0.0 or i < min_idx) :
			_mouse_node = marker
			min_length = dist_to_mouse
			min_idx = i
	
	
	if _is_dragging:
		if _mouse_node == _key_points_markers[_matching_point_idx]:
			_matching_point_idx += 1
	
	if _matching_point_idx == len(_key_points_markers):
		success()
		return



func _input(event: InputEvent) -> void:
	if not _is_matching:
		return
	
	if event.is_action_pressed(\"mouse_left\"):
		if _mouse_node != _key_points_markers[_matching_point_idx]:
			return
		
		_matching_point_idx += 1
		_is_dragging = true
	
	if event.is_action_released(\"mouse_left\"):
		_matching_point_idx = 0
		_is_dragging = false


#func _draw() -> void:
	#if not _is_matching:
		#return
	#
	#if _matching_point_idx < len(_key_points_markers):
		#draw_circle(_key_points_markers[_matching_point_idx].global_position-global_position, 10.0, Color.ROYAL_BLUE)
	#
	##for i in _key_points_markers:
		##draw_circle(i.global_position-global_position, 5.0, Color.RED)
	##
	##for i:int in range(_matching_point_idx):
		##var marker : Control = _key_points_markers[i]
		##draw_circle(marker.global_position-global_position, 5.0, Color.GREEN)
	##
	##if _mouse_node != null:
		##draw_line(_mouse_node.global_position-global_position, get_local_mouse_position(), Color.RED)
	##
	#for i:int in range(1, _matching_point_idx):
		#draw_line(_key_points_markers[i-1].global_position-global_position, _key_points_markers[i].global_position-global_position, Color.ROYAL_BLUE, 10.0, true)


func _on_failed() -> void:
	pass
	#print(\"FAIL\")


func _on_succeed() -> void:
	pass
	#print(\"SUCCESS\")



func success() -> void:
	_is_matching = false
	succeed.emit()
"

[node name="RuneMatch" type="CenterContainer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_uf2wm")

[connection signal="succeed" from="." to="." method="_on_succeed"]
